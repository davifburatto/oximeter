/*
 * LilyGo-HeartRate-Kit
 * main.cpp
 * Wirte by  Lewis he , 2020
 */

/*
segue fluxo normal do programa
coloca inicio de captura de oxigenacao e sensores na segunda pagina
sensor max usa SPI. SPI.start nao usar Wire.start
apertando o botao novamente a captura para e volta par ao menu de relogio


*/

#include <ArduinoOTA.h>
#include <Wire.h>
#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <TFT_eSPI.h>
#include <OneButton.h>
#include <pcf8563.h>


#include "MPU6050.h"
#include "heartRate.h"
#include "esp_adc_cal.h"
#include "image.h"
#include <max32664.h>
#include <SPI.h>
#include <mySD_mod.h>


// Has been defined in the TFT_eSPI library
// #define TFT_RST             26
// #define TFT_MISO            -1
// #define TFT_MOSI            19
// #define TFT_SCLK            18
// #define TFT_CS              5
// #define TFT_DC              23
// #define TFT_BL              27

#define  I2C_SDA_PIN             21
#define  I2C_SCL_PIN             22
#define  RTC_INT_PIN             34
#define  BATT_ADC_PIN            35
#define  VBUS_PIN                37
#define  LED_PIN                 33
#define  CHARGE_PIN              32
#define  BUTTON_PIN              38
#define  MPU_INT                 39
#define  RESET_PIN               2
#define  MFIO_PIN                4
#define  RAWDATA_BUFFLEN         250

//#define  ARDUINO_OTA_UPDATE      //! Enable this line use OTA update

#define  WIFI_SSID               "Xiaomi"
#define  WIFI_PASSWD             "12345678"



TFT_eSPI    tft = TFT_eSPI();  // Invoke library, pins defined in User_Setup.h
PCF8563_Class rtc;
MPU6050     mpu;
OneButton   button(BUTTON_PIN, true);
max32664 MAX32664(RESET_PIN, MFIO_PIN, RAWDATA_BUFFLEN);
//sdcard
File myFile;
const int chipSelect = 5;

bool        nocal=0;
bool        freefallDetected = false;
int         freefallBlinkCount = 0;
char        buff[256];
bool        rtcIrq = false;
bool        initial = 1;
uint8_t     func_select = 2;
uint8_t     omm = 99;
uint8_t     xcolon = 0;
uint32_t    targetTime = 0;       // for next 1 second timeout
uint32_t    colour = 0;
int         vref = 1100;
bool        charge_indication = false;
uint8_t     hh, mm, ss ;

/*MAX32664*/
float systol;
float diastol;
float heart;
float oxig;
String dataMessage;
unsigned long tseconds; 
unsigned long lastTimebmp = 0;
unsigned long timerDelaybmp = 100;

/*MAX30105*/
const uint8_t RATE_SIZE = 4; //Increase this for more averaging. 4 is good.
uint8_t     rates[RATE_SIZE]; //Array of heart rates
uint8_t     rateSpot = 0;
long        lastBeat = 0; //Time at which the last beat occurred
float       beatsPerMinute;
int         beatAvg;
bool        find_max30105 = false;
bool        showError = false;

void drawProgressBar(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint8_t percentage, uint16_t frameColor, uint16_t barColor);


void initSDCard(){
Serial.print("Initializing Micro SD card...");
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open("data.txt", FILE_WRITE);
    // if the file opened okay, write to it:
  if (myFile) {
    Serial.print("Writing to data.txt...");
    myFile.println("Data collection begin.");
    myFile.println("Millis; Systolic; Diastolic; Heart Rate; SPO2");
	myFile.flush();
    // close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening data.txt");
  }
  
}

void mfioInterruptHndlr(){
  //Serial.println("i");
}

void enableInterruptPin(){

  //pinMode(mfioPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(MAX32664.mfioPin), mfioInterruptHndlr, FALLING);

}

void loadAlgomodeParameters(){

  algomodeInitialiser algoParameters;
  /*  Replace the predefined values with the calibration values taken with a reference spo2 device in a controlled environt.
      Please have a look here for more information, https://pdfserv.maximintegrated.com/en/an/an6921-measuring-blood-pressure-MAX32664D.pdf
      https://github.com/Protocentral/protocentral-pulse-express/blob/master/docs/SpO2-Measurement-Maxim-MAX32664-Sensor-Hub.pdf
  */

  algoParameters.calibValSys[0] = 120;
  algoParameters.calibValSys[1] = 122;
  algoParameters.calibValSys[2] = 125;

  algoParameters.calibValDia[0] = 80;
  algoParameters.calibValDia[1] = 81;
  algoParameters.calibValDia[2] = 82;

  algoParameters.spo2CalibCoefA = 1.5958422;
  algoParameters.spo2CalibCoefB = -34.659664;
  algoParameters.spo2CalibCoefC = 112.68987;

  MAX32664.loadAlgorithmParameters(&algoParameters);
}

void startnewcalib(void)
{       // Initialize sensor
	loadAlgomodeParameters();
	int result = MAX32664.hubBegin();
		
    //Mantenha o dedo pressionado
    Serial.println("Mantenha o dedo - Calib");
    bool ret = MAX32664.startBPTcalibration();
    while(!ret){
    delay(1000);//10000
    Serial.println("failed calib, please restart");
    }

  delay(2000);

    Serial.println("start in estimation mode");
    ret = MAX32664.configAlgoInEstimationMode();
    while(!ret){

    Serial.println("failed est mode");
    ret = MAX32664.configAlgoInEstimationMode();
    delay(2000);
  }

    
    if (!find_max30105 && !showError) {
        tft.fillScreen(TFT_BLACK);
        tft.drawString("No detected sensor", 20, 30);
        showError = true;
        return;
    }

    if (showError) {
        return;
    }


}


bool setupMAX30105(void)
{
    // Initialize sensor
	int result = CMD_SUCCESS;
		
    if (!result == CMD_SUCCESS) { //Use default I2C port, 400kHz speed
    tft.setTextColor(TFT_GREEN);
    tft.println("MAX32664 was not found");
        return false;
    }
    tft.setTextColor(TFT_GREEN);
    tft.println("MAX32664 - OK");
    tft.setTextColor(TFT_GREEN);
    find_max30105 = true;
    return true;
}

void loopMAX30105(void)
{ 

    delay(100);

     if (targetTime < millis()) {
        tft.fillScreen(TFT_BLACK);
        snprintf(buff, sizeof(buff), "Sys=%d Dia=%.2d", MAX32664.max32664Output.sys, MAX32664.max32664Output.dia);
        tft.drawString(buff, 0, 0);
        snprintf(buff, sizeof(buff), "HR=%d SPO=%.2f", MAX32664.max32664Output.hr, MAX32664.max32664Output.spo2);
        tft.drawString(buff, 0, 16);
        targetTime += 1000;
    }

  

    //////write sd
    if ((millis() - lastTimebmp) > timerDelaybmp) { //reading every 200ms
    tseconds = millis();
      ///get MAX32664 reading 
    uint8_t num_samples = MAX32664.readSamples();
    if(num_samples==0) Serial.println("MAX32664 - No samples to read");
    systol = MAX32664.max32664Output.sys;
    diastol = MAX32664.max32664Output.dia;
    heart = MAX32664.max32664Output.hr;
    oxig = MAX32664.max32664Output.spo2;
    dataMessage = String(tseconds) + ";" + String(systol) +";"+ String(diastol) +";"+ String(heart) +";"+ String(oxig) + "\r\n";
    //write to display
    

   
    //Append the data to file
    myFile = SD.open("data.txt", FILE_WRITE);
    if (myFile) 
        {
        
        Serial.println("Millis;Syst;Dias;HR;SPO2 ");
        Serial.println(dataMessage);
        myFile.println(dataMessage.c_str());
        myFile.flush();
	    // close the file:
        myFile.close();
  
        Serial.println("Done Writting.");
        }    
    else {
        // if the file didn't open, print an error:
        Serial.println("error opening data.txt");
        }

 lastTimebmp = millis();
    }//end write
     
}


void setup(void)
{
    Serial.begin(115200);

    //pinMode(SS, OUTPUT);

  if (!SD.begin(26, 14, 13, 27)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("SD initialization done.");
    initSDCard();

    tft.init();
    tft.setRotation(1);
    tft.setSwapBytes(true);
    tft.pushImage(0, 0,  160, 80, ttgo);
    delay(2000);

   // pinMode(LED_PIN, OUTPUT);
   
    Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
    

    tft.fillScreen(TFT_BLACK);
    tft.setTextFont(2);
    tft.setCursor(0, 0);
    tft.setTextColor(TFT_GREEN);

    if (!setupMAX30105()) {
        tft.setTextColor(TFT_RED);
        tft.println("Check MAX30105 FAIL");
        tft.setTextColor(TFT_GREEN);
    } else {
        tft.println("Check MAX30105 PASS");
    }

    setCpuFrequencyMhz(80);

    delay(3000);

    func_select = 0;
    targetTime = 0;
    tft.fillScreen(TFT_BLACK);
    tft.setTextColor(TFT_YELLOW, TFT_BLACK); // Note: the new fonts do not draw the background colour


}

String getVoltage()
{
    uint16_t v = analogRead(BATT_ADC_PIN);
    float battery_voltage = ((float)v / 4095.0) * 2.0 * 3.3 * (vref / 1000.0);
    return String(battery_voltage) + "V";
}


void page1()
{
     if (charge_indication) {
        charge_indication = false;
        if (digitalRead(CHARGE_PIN) == LOW) {
            tft.pushImage(140, 55, 16, 16, charge);
        } else {
            tft.fillRect(140, 55, 16, 16, TFT_BLACK);
        }
    }

    if (targetTime < millis()) {
        RTC_Date datetime = rtc.getDateTime();
        hh = datetime.hour;
        mm = datetime.minute;
        ss = datetime.second;
        // Serial.printf("hh:%d mm:%d ss:%d\n", hh, mm, ss);
        targetTime = millis() + 1000;
        if (ss == 0 || initial) {
            initial = 0;
            tft.setTextColor(TFT_GREEN, TFT_BLACK);
            tft.setCursor (8, 60);
            tft.print(__DATE__); // This uses the standard ADAFruit small font
        }
        tft.setTextColor(TFT_BLUE, TFT_BLACK);
        tft.drawCentreString(getVoltage(), 120, 65, 1);
 

        // Update digital time
        uint8_t xpos = 6;
        uint8_t ypos = 0;
        if (omm != mm) { // Only redraw every minute to minimise flicker
            // Uncomment ONE of the next 2 lines, using the ghost image demonstrates text overlay as time is drawn over it
            tft.setTextColor(0x39C4, TFT_BLACK);  // Leave a 7 segment ghost image, comment out next line!
            //tft.setTextColor(TFT_BLACK, TFT_BLACK); // Set font colour to black to wipe image
            // Font 7 is to show a pseudo 7 segment display.
            // Font 7 only contains characters [space] 0 1 2 3 4 5 6 7 8 9 0 : .
            tft.drawString("88:88", xpos, ypos, 7); // Overwrite the text to clear it
            tft.setTextColor(0xFBE0, TFT_BLACK); // Orange
            omm = mm;

            if (hh < 10) xpos += tft.drawChar('0', xpos, ypos, 7);
            xpos += tft.drawNumber(hh, xpos, ypos, 7);
            xcolon = xpos;
            xpos += tft.drawChar(':', xpos, ypos, 7);
            if (mm < 10) xpos += tft.drawChar('0', xpos, ypos, 7);
            tft.drawNumber(mm, xpos, ypos, 7);
        }

        if (ss % 2) { // Flash the colon
            tft.setTextColor(0x39C4, TFT_BLACK);
            xpos += tft.drawChar(':', xcolon, ypos, 7);
            tft.setTextColor(0xFBE0, TFT_BLACK);
        } else {
            tft.drawChar(':', xcolon, ypos, 7);
        }
    }
}

void loop()
{ 
    
    switch (func_select) {
    case 0:
        if(nocal==0) {
            startnewcalib();
            nocal=1;
            }
        loopMAX30105();
        break;
    case 1:
        if(nocal==0) {
            startnewcalib();
            nocal=1;
            }
        loopMAX30105();
        break;
    case 2:
        if(nocal==0) {
            startnewcalib();
            nocal=1;
            }
        loopMAX30105();
        break;
    default:
        break;
    }
}



void drawProgressBar(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint8_t percentage, uint16_t frameColor, uint16_t barColor)
{
    if (percentage == 0) {
        tft.fillRoundRect(x0, y0, w, h, 3, TFT_BLACK);
    }
    uint8_t margin = 2;
    uint16_t barHeight = h - 2 * margin;
    uint16_t barWidth = w - 2 * margin;
    tft.drawRoundRect(x0, y0, w, h, 3, frameColor);
    tft.fillRect(x0 + margin, y0 + margin, barWidth * percentage / 100.0, barHeight, barColor);
}

